# -*- coding: utf-8 -*-
import logging
import json
import os
import asyncio
from datetime import datetime, date
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, PreCheckoutQueryHandler, MessageHandler, filters

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (JSON) ===

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    if os.path.exists(config.USER_DATA_FILE):
        with open(config.USER_DATA_FILE, 'r', encoding='utf-8') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

def save_users(users):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON-—Ñ–∞–π–ª."""
    with open(config.USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

def get_user_data(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    users = load_users()
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users[user_id_str] = {
            'username': '',
            'balance': config.REGISTRATION_BONUS, # –í—ã–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å
            'last_bonus_date': None # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        }
        save_users(users)
        logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    
    return users[user_id_str]

def update_user_data(user_id, data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    users = load_users()
    user_id_str = str(user_id)
    users[user_id_str].update(data)
    save_users(users)

# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    user_data = get_user_data(user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if not user_data.get('username') and user.username:
        update_user_data(user.id, {'username': user.username})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–∞–∑–∏–Ω–æ! üé∞\n"
        f"–¢–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å: {config.REGISTRATION_BONUS} Stars! ‚≠ê\n\n"
        f"üíé <b>–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 100 Stars!</b>\n"
        f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–º—É —ç—Ç—É —Å—Å—ã–ª–∫—É:\n"
        f"https://t.me/–í–∞—à–ë–æ—Ç?start=ref_{user.id}\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/game - üé≤ –°—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å—Ç–∏\n"
        f"/balance - üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å\n"
        f"/bonus - üéÅ –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n"
        f"/buy - üíµ –ö—É–ø–∏—Ç—å –µ—â–µ Stars\n\n"
        f"<i>–£–¥–∞—á–∏! –ü—É—Å—Ç—å —Ñ–æ—Ä—Ç—É–Ω–∞ –±—É–¥–µ—Ç –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!</i> üçÄ"
    )

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å."""
    user = update.effective_user
    user_data = get_user_data(user.id)
    
    balance_text = (
        f"üí∞ <b>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} Stars\n\n"
        f"–•–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π /buy"
    )
    await update.message.reply_html(balance_text)

async def bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bonus. –í—ã–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å."""
    user = update.effective_user
    user_data = get_user_data(user.id)
    
    today = date.today().isoformat()
    last_bonus_date = user_data.get('last_bonus_date')
    
    if last_bonus_date == today:
        # –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        bonus_text = "‚ùå –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞!"
        await update.message.reply_html(bonus_text)
        return
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å (0 Stars)
    new_balance = user_data['balance'] + config.DAILY_BONUS
    update_user_data(user.id, {
        'balance': new_balance,
        'last_bonus_date': today
    })
    
    bonus_text = (
        f"üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:\n"
        f"+{config.DAILY_BONUS} Stars!\n\n"
        f"üí∞ <b>–¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {new_balance} Stars"
    )
    await update.message.reply_html(bonus_text)

# === –ò–ì–†–û–í–ê–Ø –ú–ï–•–ê–ù–ò–ö–ê "–ö–£–ë–ò–ö" ===

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /game. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É."""
    user_data = get_user_data(update.effective_user.id)
    keyboard = [
        [InlineKeyboardButton("5 Stars", callback_data="bet_5")],
        [InlineKeyboardButton("10 Stars", callback_data="bet_10")],
        [InlineKeyboardButton("25 Stars", callback_data="bet_25")],
        [InlineKeyboardButton("50 Stars", callback_data="bet_50")],
        [InlineKeyboardButton("100 Stars", callback_data="bet_100")],
        [InlineKeyboardButton("–î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="custom_bet")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        f"üé≤ <b>–ò–≥—Ä–∞ –≤ –ö–æ—Å—Ç–∏</b>\n\n"
        f"–ü—Ä–∞–≤–∏–ª–∞:\n"
        f"‚Ä¢ –°—Ç–∞–≤—å Stars –∏ –±—Ä–æ—Å–∞–π –∫—É–±–∏–∫\n"
        f"‚Ä¢ –í—ã–ø–∞–¥–∞–µ—Ç 6 - –ø–æ–±–µ–¥–∞ üéâ (x{config.WIN_MULTIPLIER})\n"
        f"‚Ä¢ –í—ã–ø–∞–¥–∞–µ—Ç 1-5 - –ø—Ä–æ–∏–≥—Ä—ã—à üò¢\n\n"
        f"üí∞ <b>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} Stars\n"
        f"–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:",
        reply_markup=reply_markup
    )

async def handle_bet_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∞–≤–∫–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    user_data = get_user_data(query.from_user.id)
    user_balance = user_data['balance']
    
    if query.data == "custom_bet":
        # –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
        await query.edit_message_text(
            f"üíé –í–≤–µ–¥–∏ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É (–æ—Ç {config.MIN_BET} –¥–æ {config.MAX_BET} Stars):\n"
            f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_balance} Stars"
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
        context.user_data['waiting_for_bet'] = True
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫
    bet_amount = int(query.data.split('_')[1])
    
    if bet_amount > user_balance:
        await query.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_balance} Stars")
        return
    
    if bet_amount < config.MIN_BET or bet_amount > config.MAX_BET:
        await query.edit_message_text(f"‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {config.MIN_BET} –¥–æ {config.MAX_BET} Stars")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π
    await play_dice_game(query, context, bet_amount)

async def handle_custom_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É, –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    if not context.user_data.get('waiting_for_bet'):
        return
    
    user_data = get_user_data(update.effective_user.id)
    user_balance = user_data['balance']
    
    try:
        bet_amount = int(update.message.text)
        
        if bet_amount < config.MIN_BET:
            await update.message.reply_html(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {config.MIN_BET} Stars")
            return
        if bet_amount > config.MAX_BET:
            await update.message.reply_html(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {config.MAX_BET} Stars")
            return
        if bet_amount > user_balance:
            await update.message.reply_html(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_balance} Stars")
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['waiting_for_bet'] = False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        await play_dice_game_from_message(update, context, bet_amount)
        
    except ValueError:
        await update.message.reply_html("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ!")

async def play_dice_game(query, context, bet_amount):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ—Å—Ç–∏ –∏–∑ callback query."""
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    new_balance = user_data['balance'] - bet_amount
    update_user_data(user_id, {'balance': new_balance})
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫—É–±–∏–∫–∞
    message = await context.bot.send_dice(
        chat_id=query.message.chat_id,
        emoji='üé≤',
        reply_to_message_id=query.message.message_id
    )
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (3-4 —Å–µ–∫—É–Ω–¥—ã)
    await asyncio.sleep(4)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    dice_value = message.dice.value
    await process_game_result(context, user_id, bet_amount, dice_value, message.chat_id, message.message_id)

async def play_dice_game_from_message(update: Update, context: ContextTypes.DEFAULT_TYPE, bet_amount):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    new_balance = user_data['balance'] - bet_amount
    update_user_data(user_id, {'balance': new_balance})
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫—É–±–∏–∫–∞
    message = await context.bot.send_dice(
        chat_id=update.effective_chat.id,
        emoji='üé≤'
    )
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (3-4 —Å–µ–∫—É–Ω–¥—ã)
    await asyncio.sleep(4)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    dice_value = message.dice.value
    await process_game_result(context, user_id, bet_amount, dice_value, message.chat_id, message.message_id)

async def process_game_result(context, user_id, bet_amount, dice_value, chat_id, message_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞."""
    user_data = get_user_data(user_id)
    current_balance = user_data['balance']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏–∑ config.py
    if dice_value in config.WINNING_DICE_VALUES:
        # –ü–û–ë–ï–î–ê
        win_amount = bet_amount * config.WIN_MULTIPLIER
        new_balance = current_balance + win_amount
        update_user_data(user_id, {'balance': new_balance})
        
        result_text = (
            f"üéâ <b>–ü–û–ë–ï–î–ê!</b> üéâ\n\n"
            f"üé≤ –í—ã–ø–∞–ª–æ: {dice_value}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} Stars\n"
            f"üèÜ –í—ã–∏–≥—Ä—ã—à: {win_amount} Stars (x{config.WIN_MULTIPLIER})\n"
            f"üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} Stars\n\n"
            f"<i>–£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! üçÄ</i>"
        )
    else:
        # –ü–†–û–ò–ì–†–´–®
        result_text = (
            f"üò¢ <b>–ü–†–û–ò–ì–†–´–®</b>\n\n"
            f"üé≤ –í—ã–ø–∞–ª–æ: {dice_value}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} Stars\n"
            f"üíé –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {current_balance} Stars\n\n"
            f"<i>–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –£–¥–∞—á–∞ –∂–¥–µ—Ç —Ç–µ–±—è! ‚ú®</i>"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    await context.bot.send_message(
        chat_id=chat_id,
        text=result_text,
        reply_to_message_id=message_id,
        parse_mode='HTML'
    )

# === –°–ò–°–¢–ï–ú–ê –û–ü–õ–ê–¢–´ –ß–ï–†–ï–ó TELEGRAM STARS ===

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫—É–ø–∏—Ç—å Stars."""
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å (—Å—á–µ—Ç) –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Stars
    chat_id = update.effective_chat.id
    title = "–ü–æ–∫—É–ø–∫–∞ Stars –¥–ª—è –∫–∞–∑–∏–Ω–æ"
    description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞. –ö—É—Ä—Å: 1 Stars = {config.STARS_TO_COINS_RATE} Stars"
    
    # –í—ã–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    payload = "CASINO_PAYMENT"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
    provider_token = "XTR"  # –î–ª—è Telegram Stars –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "XTR"
    currency = "XTR"  # –í–∞–ª—é—Ç–∞ Telegram Stars
    prices = [LabeledPrice("100 Stars", 100)]  # –¶–µ–Ω–∞ –≤ Stars (100 Stars = 100 Stars –ø–æ –Ω–∞—à–µ–º—É –∫—É—Ä—Å—É 1:1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
    await context.bot.send_invoice(
        chat_id,
        title,
        description,
        payload,
        provider_token,
        currency,
        prices,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False,
        start_parameter="casino-deposit"
    )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É."""
    query = update.pre_checkout_query
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º payload, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
    if query.invoice_payload != 'CASINO_PAYMENT':
        await query.answer(ok=False, error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    else:
        await query.answer(ok=True)

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂."""
    user = update.effective_user
    payment = update.message.successful_payment
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars (Total_amount / 100 * –∫—É—Ä—Å)
    # Telegram –ø–µ—Ä–µ–¥–∞–µ—Ç —Å—É–º–º—É –≤ —Ü–µ–Ω—Ç–∞—Ö/–∫–æ–ø–µ–π–∫–∞—Ö, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∏–º –Ω–∞ 100
    stars_amount = payment.total_amount / 100
    coins_to_add = int(stars_amount * config.STARS_TO_COINS_RATE)
    
    # –ó–∞—á–∏—Å–ª—è–µ–º Stars –Ω–∞ –±–∞–ª–∞–Ω—Å
    user_data = get_user_data(user.id)
    new_balance = user_data['balance'] + coins_to_add
    update_user_data(user.id, {'balance': new_balance})
    
    payment_text = (
        f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: {stars_amount} Stars\n"
        f"üé∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: {coins_to_add} Stars\n\n"
        f"üí∞ <b>–¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {new_balance} Stars\n\n"
        f"–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üçÄ"
    )
    
    await update.message.reply_html(payment_text)

# === –ó–ê–ü–£–°–ö –ò –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ===

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ config.py
    application = Application.builder().token(config.BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("bonus", bonus))
    application.add_handler(CommandHandler("game", game))
    application.add_handler(CommandHandler("buy", buy))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CallbackQueryHandler(handle_bet_selection, pattern="^bet_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_bet))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()